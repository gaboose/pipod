mod podman
mod disks
mod secret

set allow-duplicate-variables

base_image_sha256 := ""
image_name := ""
image_file := ""

build_dir := "build"
output_dir := "out"

build:
    #!/usr/bin/env bash
    set -e

    base_image_file=""
    ensure_base_image() {
        base_image_file="{{build_dir}}/base/$(basename "{{base_image_url}}")"

        # Download base image file if it's not yet downloaded
        if [ ! -f "$base_image_file" ]; then
            mkdir -p "{{build_dir}}/base"
            wget -O "$base_image_file" "{{base_image_url}}"
        fi

        # Check integrity if checksum is provided
        if [ "{{base_image_sha256}}" = "" ]; then
            echo "Warning: Using $base_image_file but couldn't verify its checksum."
        elif ! echo "{{base_image_sha256}}  $base_image_file" | sha256sum -c -; then
            echo "Checksum failed for $base_image_file. Try removing the build dir."
            exit 1
        fi

    }

    working_image_file=""
    prepare_working_image() {
        ensure_base_image

        if [ -d "{{build_dir}}/working" ]; then
            rm -r "{{build_dir}}/working"
        fi

        mkdir -p {{build_dir}}/working
        working_image_file="{{build_dir}}/working/$(basename "$base_image_file")"

        cp "$base_image_file" "$working_image_file"

        # Decompress if compressed
        if [[ "$working_image_file" =~ \.bz2$ ]]; then
            bzip2 -d "$working_image_file"
            working_image_file="${working_image_file%.bz2}"
        elif [[ "$working_image_file" =~ \.xz$ ]]; then
            xz -d "$working_image_file"
            working_image_file="${working_image_file%.xz}"
        fi
    }

    if ! sudo podman image exists "{{base_image_name}}"; then
        prepare_working_image
        just podman import "$working_image_file" 2 "{{base_image_name}}"
    fi

    if [ "{{image_name}}" = "" ] && [ "{{image_file}}" = "" ]; then
        exit 0
    fi

    image_id=$(sudo podman build . -t "{{image_name}}" | tee /dev/tty | tail -n1)

    if [ "{{image_file}}" = "" ]; then
        exit 0
    fi

    if [ "$working_image_file" = "" ]; then
        prepare_working_image
    fi

    just podman export "$image_id" "$working_image_file" 2
    # just podman export $image_id $working_image_file 3

    # Remove image from podman if *image_name* is not provided.
    # Providing *image_file* without *image_name* is the workflow for
    # putting secrets into the disk image, and generally we don't want
    # podman images with secrets at all.
    if [ "{{image_name}}" =  "" ]; then
        sudo podman rmi "$image_id"
    fi
    
    mkdir -p "{{output_dir}}"
    mv "$working_image_file" "{{output_dir}}/{{image_file}}"